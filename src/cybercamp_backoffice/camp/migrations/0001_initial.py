# Generated by Django 3.1.7 on 2021-03-25 12:24

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(help_text='Organisation used after @', max_length=30)),
                ('world', models.CharField(blank=True, help_text='if not set, will be added from request to map_url', max_length=30, null=True)),
                ('room', models.CharField(blank=True, help_text='if not set, will be added from request to map_url', max_length=30, null=True)),
                ('map_url', models.URLField()),
                ('policy', models.IntegerField(choices=[(1, 'Anonymous'), (2, 'Members only'), (3, 'use Tags')])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wa_uuid', models.UUIDField(auto_created=True, default=uuid.uuid4, unique=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wa_organization', models.CharField(default='cybercamp', help_text='OrganisationSlug, for start map', max_length=30)),
                ('wa_world', models.CharField(default='camp', help_text='WorldSlug, for start map', max_length=30)),
                ('wa_room', models.CharField(default='map.json', help_text='RoomSlug, for start map', max_length=30)),
                ('first_name', models.CharField(max_length=100, verbose_name='Vorname')),
                ('last_name', models.CharField(max_length=100, verbose_name='Nachname')),
                ('address', models.CharField(max_length=100, verbose_name='Adresse')),
                ('zip_code', models.CharField(max_length=5, verbose_name='Postleitzahl')),
                ('city', models.CharField(max_length=100, verbose_name='Ort')),
                ('gender', models.CharField(choices=[('d', 'divers'), ('m', 'm√§nnlich'), ('w', 'weiblich')], max_length=1, verbose_name='Geschlecht')),
                ('birthday', models.DateField(verbose_name='Geburtstag')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
